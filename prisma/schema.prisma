// This is your Prisma schema file for GREIA Platform
// Learn more about Prisma: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  
  // Properties Marketplace Relations
  propertyListings    PropertyListing[]    // Properties listed by the user
  propertyViews       PropertyView[]       // Properties viewed by the user
  propertyFavorites   PropertyFavorite[]   // Properties favorited by the user
  propertyEnquiries   PropertyEnquiry[]    // Property enquiries made by the user
  propertyOffers      PropertyOffer[]      // Offers made on properties
  agentProfile        AgentProfile?        // Optional agent profile for verified agents
  
  // Auth Relations
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Properties Marketplace Models
model PropertyListing {
  id            String          @id @default(cuid())
  title         String
  description   String         @db.Text
  price         Decimal        @db.Decimal(10, 2)
  currency      String         @default("GBP")
  location      String
  propertyType  PropertyType
  listingType   ListingType
  status        ListingStatus  @default(ACTIVE)
  bedrooms      Int?
  bathrooms     Int?
  features      String[]       // Array of property features
  amenities     String[]       // Array of nearby amenities
  images        PropertyImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  userId        String         // Owner/Agent who created the listing
  user          User           @relation(fields: [userId], references: [id])
  views         PropertyView[]
  favorites     PropertyFavorite[]
  enquiries     PropertyEnquiry[]
  offers        PropertyOffer[]

  @@index([propertyType])
  @@index([listingType])
  @@index([status])
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
}

enum ListingType {
  SALE
  RENT
}

enum ListingStatus {
  DRAFT
  ACTIVE
  UNDER_OFFER
  SOLD
  RENTED
  INACTIVE
}

model PropertyImage {
  id              String         @id @default(cuid())
  url             String
  propertyId      String
  property        PropertyListing @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  isPrimary       Boolean        @default(false)
  createdAt       DateTime       @default(now())

  @@index([propertyId])
}

model PropertyView {
  id          String         @id @default(cuid())
  propertyId  String
  userId      String
  viewedAt    DateTime       @default(now())
  property    PropertyListing @relation(fields: [propertyId], references: [id])
  user        User           @relation(fields: [userId], references: [id])

  @@unique([propertyId, userId])
}

model PropertyFavorite {
  id          String         @id @default(cuid())
  propertyId  String
  userId      String
  createdAt   DateTime       @default(now())
  property    PropertyListing @relation(fields: [propertyId], references: [id])
  user        User           @relation(fields: [userId], references: [id])

  @@unique([propertyId, userId])
}

model PropertyEnquiry {
  id          String         @id @default(cuid())
  propertyId  String
  userId      String
  message     String         @db.Text
  status      EnquiryStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  property    PropertyListing @relation(fields: [propertyId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
}

enum EnquiryStatus {
  PENDING
  RESPONDED
  CLOSED
}

model PropertyOffer {
  id          String         @id @default(cuid())
  propertyId  String
  userId      String
  amount      Decimal        @db.Decimal(10, 2)
  currency    String         @default("GBP")
  status      OfferStatus    @default(PENDING)
  message     String?        @db.Text
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  property    PropertyListing @relation(fields: [propertyId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model AgentProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  company         String?
  licenseNumber   String?
  phone           String?
  bio            String?    @db.Text
  verifiedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}