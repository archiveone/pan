// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER          // Basic user
  LANDLORD      // Property owner/landlord
  AGENT         // Real estate agent
  ADMIN         // System administrator
}

enum SubscriptionTier {
  FREE
  PRO
}

enum PropertyStatus {
  DRAFT           // Initial creation
  PENDING_REVIEW  // Submitted for review
  APPROVED        // Approved by admin/agent
  ACTIVE          // Live on the platform
  INACTIVE        // Temporarily hidden
  REJECTED        // Rejected by admin/agent
  SOLD            // Property sold
  RENTED          // Property rented
}

enum ListingType {
  SALE
  RENT
  AUCTION
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LUXURY
  TIMESHARE
  LAND
  INDUSTRIAL
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole        @default(USER)
  subscriptionTier   SubscriptionTier @default(FREE)
  subscriptionEnds   DateTime?       // For PRO subscriptions
  stripeCustomerId   String?         @unique
  stripeVerificationId String?
  isVerified         Boolean         @default(false)
  
  // Agent/Landlord specific fields
  companyName        String?
  licenseNumber      String?         // For agents
  licenseVerified    Boolean         @default(false)
  agentRating       Float?          // Average rating for agents
  totalReviews      Int             @default(0)
  
  // Usage limits and quotas
  monthlyListingQuota Int            @default(3)  // Free users get 3 listings
  monthlyListingsUsed Int            @default(0)
  quotaResetDate    DateTime?
  
  // Feature access flags
  hasAnalyticsAccess Boolean        @default(false)
  hasCrmAccess      Boolean         @default(false)
  hasFeatureListings Boolean        @default(false)
  hasPrivateMarketplace Boolean     @default(false)
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  properties        Property[]      // Properties owned/listed
  reviews          AgentReview[]   // Reviews received (for agents)
  accounts         Account[]
  sessions         Session[]
}

model Property {
  id               String          @id @default(cuid())
  title            String
  description      String
  type             PropertyType
  listingType      ListingType
  price            Float
  size             Float?
  bedrooms         Int?
  bathrooms        Int?
  features         String[]
  
  // Status and verification
  status           PropertyStatus  @default(DRAFT)
  isVerified       Boolean        @default(false)
  isFeatured       Boolean        @default(false)
  isPrivate        Boolean        @default(false)  // For private marketplace
  
  // Review details
  reviewedBy       String?        // Admin/Agent who reviewed
  reviewedAt       DateTime?
  reviewNotes      String?
  
  // Marketplace designation
  inAgentMarketplace Boolean     @default(false)
  inPublicMarketplace Boolean    @default(false)
  
  // Relations
  owner            User           @relation(fields: [ownerId], references: [id])
  ownerId          String
  
  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model AgentReview {
  id              String         @id @default(cuid())
  rating          Int
  comment         String
  isVerified      Boolean       @default(false)
  
  // Relations
  agent           User          @relation(fields: [agentId], references: [id])
  agentId         String
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}