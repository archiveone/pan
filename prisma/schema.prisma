// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  coverImage    String?
  location      String?
  website       String?
  joinedAt      DateTime  @default(now())
  verified      Boolean   @default(false)

  // Professional Info
  company       String?
  position      String?
  experience    String?
  specialties   String[]
  certifications String[]

  // Relationships
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]    @relation("following")
  following     Follow[]    @relation("followers")
  messages      Message[]   @relation("sent")
  receivedMessages Message[] @relation("received")
  notifications Notification[] @relation("userNotifications")
  groupMemberships GroupMember[]
  events        Event[]     @relation("organizer")
  eventAttendees EventAttendee[]
  communities   CommunityMember[]
  savedPosts    SavedPost[]
  achievements  Achievement[]

  // Activity tracking
  lastActive    DateTime   @default(now())
  onlineStatus  String?    // "online", "offline", "away"

  @@index([email])
  @@index([username])
}

// Social Posts
model Post {
  id          String    @id @default(cuid())
  content     String
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  
  // Post type and references
  type        String    // "general", "property", "service", "event"
  propertyId  String?   // Reference to property if type is "property"
  serviceId   String?   // Reference to service if type is "service"
  eventId     String?   // Reference to event if type is "event"

  // Engagement
  likes       Like[]
  comments    Comment[]
  shares      Share[]
  savedBy     SavedPost[]
  
  // Visibility
  visibility  String    @default("public") // "public", "followers", "private"
  
  @@index([authorId])
  @@index([type])
}

// Comments
model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  
  // Nested comments
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  @@index([authorId])
  @@index([postId])
}

// Likes
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Follows
model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Direct Messages
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("sent", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("received", fields: [receiverId], references: [id])
  receiverId String
  read      Boolean  @default(false)
  
  // Message type
  type      String   @default("text") // "text", "image", "file"
  fileUrl   String?
  
  // Chat thread grouping
  threadId  String?
  
  @@index([senderId])
  @@index([receiverId])
  @@index([threadId])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  type      String   // "like", "comment", "follow", "mention", "message"
  content   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation("userNotifications", fields: [userId], references: [id])
  userId    String
  
  // Reference data
  postId    String?
  commentId String?
  senderId  String?
  
  @@index([userId])
}

// Groups
model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  type        String    // "professional", "interest", "location"
  privacy     String    @default("public") // "public", "private", "secret"
  
  // Members
  members     GroupMember[]
  
  // Content
  posts       GroupPost[]
  events      Event[]
}

model GroupMember {
  id        String   @id @default(cuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String   @default("member") // "admin", "moderator", "member"
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupPost {
  id        String   @id @default(cuid())
  content   String
  images    String[]
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  authorId  String

  @@index([groupId])
}

// Events
model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String?
  image       String?
  capacity    Int?
  privacy     String    @default("public") // "public", "private"
  
  // Organizer
  organizer   User      @relation("organizer", fields: [organizerId], references: [id])
  organizerId String
  
  // Group association
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     String?
  
  // Attendees
  attendees   EventAttendee[]
  
  @@index([organizerId])
  @@index([groupId])
}

model EventAttendee {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    String   // "going", "maybe", "not_going"
  joinedAt  DateTime @default(now())

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

// Communities
model Community {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  type        String    // "property", "service", "location"
  members     CommunityMember[]
}

model CommunityMember {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        String    @default("member") // "admin", "moderator", "member"
  joinedAt    DateTime  @default(now())

  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
}

// Saved Posts
model SavedPost {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  savedAt   DateTime @default(now())
  
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Post Shares
model Share {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  sharedAt  DateTime @default(now())
  
  @@index([postId])
}

// User Achievements
model Achievement {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?
  icon        String?
  awardedAt   DateTime @default(now())
  
  @@index([userId])
}