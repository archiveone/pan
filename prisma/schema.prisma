// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  isVerified     Boolean   @default(false)
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Properties and Listings
  properties         Property[]
  propertySubmissions PropertySubmission[]
  valuationRequests  ValuationRequest[]
  valuationOffers    ValuationOffer[]
  agentInterests     AgentInterest[]
  
  // CRM Related
  contacts          Contact[]
  leads            Lead[]
  tasks            Task[]
  notes            Note[]
  
  // Messaging and Social
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  conversations    Conversation[]   @relation("UserConversations")
  posts            Post[]
  comments         Comment[]
  reactions        Reaction[]

  // Accounts and Sessions (NextAuth)
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Property Related Models
model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // RESIDENTIAL, COMMERCIAL, LUXURY, TIMESHARE
  status      String   // ACTIVE, PENDING, SOLD, RENTED
  price       Float
  location    String
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model PropertySubmission {
  id          String   @id @default(cuid())
  propertyDetails Json
  status      String   // PENDING, ASSIGNED, COMPLETED
  commission  Float    // 5% commission for routing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  agentInterests AgentInterest[]
}

model AgentInterest {
  id          String   @id @default(cuid())
  status      String   // INTERESTED, ACCEPTED, REJECTED
  message     String?
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  submissionId String
  submission  PropertySubmission @relation(fields: [submissionId], references: [id])
}

// Valuation Marketplace Models
model ValuationRequest {
  id          String   @id @default(cuid())
  propertyDetails Json
  status      String   // PENDING, IN_PROGRESS, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  offers      ValuationOffer[]
}

model ValuationOffer {
  id          String   @id @default(cuid())
  amount      Float
  message     String?
  status      String   // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  requestId   String
  request     ValuationRequest @relation(fields: [requestId], references: [id])
}

// CRM Models
model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  type        String   // CLIENT, AGENT, VENDOR, OTHER
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  leads       Lead[]
}

model Lead {
  id          String   @id @default(cuid())
  title       String
  status      LeadStatus
  value       Float?
  source      String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  contactId   String
  contact     Contact  @relation(fields: [contactId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      String   // TODO, IN_PROGRESS, COMPLETED
  priority    String   // LOW, MEDIUM, HIGH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Note {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

// Messaging Models
model Conversation {
  id          String   @id @default(cuid())
  name        String?
  isGroup     Boolean  @default(false)
  createdAt   DateTime @default(now())
  lastMessageAt DateTime @default(now())

  users       User[]   @relation("UserConversations")
  messages    Message[]
}

model Message {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())

  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

// Social Networking Models
model Post {
  id          String   @id @default(cuid())
  content     String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  reactions   Reaction[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
}

model Reaction {
  id          String   @id @default(cuid())
  type        String   // LIKE, LOVE, HAHA, WOW, SAD, ANGRY
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum LeadStatus {
  NEW
  QUALIFIED
  WON
  LOST
}