// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  
  // Profile fields
  bio           String?   @db.Text
  city          String?
  state         String?
  country       String?
  
  // Listings related fields
  listings         Listing[]        @relation("UserListings")
  savedListings    Listing[]        @relation("SavedListings")
  listingEnquiries ListingEnquiry[]
  
  // Social fields
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  shares          Share[]
  followers       User[]    @relation("UserFollows")
  following       User[]    @relation("UserFollows")
  
  // Verification status
  isVerified      Boolean   @default(false)
  verificationId  String?   // Stripe Identity verification ID

  // Commission related fields
  commissions     Commission[]    @relation("AgentCommissions")
  stripeAccountId String?        // Stripe Connect account ID
  bankDetails     BankDetails?
}

// Bank details for commission payments
model BankDetails {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  accountName   String
  accountNumber String
  sortCode      String
  bankName      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Commission tracking
model Commission {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Commission details
  amount        Decimal
  status        CommissionStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  
  // Transaction details
  stripePaymentId String?
  transactionRef  String?
  
  // Related records
  agent         User      @relation("AgentCommissions", fields: [agentId], references: [id])
  agentId       String
  listing       Listing   @relation(fields: [listingId], references: [id])
  listingId     String
  inquiry       ListingEnquiry @relation(fields: [inquiryId], references: [id])
  inquiryId     String    @unique

  // Metadata
  notes         String?   @db.Text

  @@index([agentId])
  @@index([listingId])
  @@index([status])
}

enum CommissionStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

// Main Listing model
model Listing {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Basic listing info
  title       String
  description String   @db.Text
  price       Decimal
  category    ListingCategory
  type        ListingType
  status      ListingStatus @default(ACTIVE)
  
  // Location details
  address     String?
  city        String
  state       String?
  country     String
  postcode    String
  latitude    Float?
  longitude   Float?
  
  // Media
  images      String[] // Array of image URLs
  videos      String[] // Array of video URLs
  
  // Specifications
  bedrooms    Int?
  bathrooms   Int?
  area        Float? // in square meters/feet
  features    String[] // Array of property features
  
  // Relations
  owner       User     @relation("UserListings", fields: [ownerId], references: [id])
  ownerId     String
  savedBy     User[]   @relation("SavedListings")
  enquiries   ListingEnquiry[]
  posts       Post[]   // Social posts referencing this listing
  commissions Commission[]
  
  // For property listings
  propertyType PropertyType?
  tenure       TenureType?
  
  // For service listings
  serviceType  ServiceType?
  availability Json? // JSON object for availability schedule
  
  // For leisure listings
  leisureType  LeisureType?
  bookingType  BookingType?
  
  // Sale/Rental tracking
  salePrice    Decimal?
  rentAmount   Decimal?
  dealDate     DateTime?
  
  @@index([category])
  @@index([type])
  @@index([status])
  @@index([city])
}

// Listing Enquiry model
model ListingEnquiry {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Enquiry details
  message     String   @db.Text
  status      EnquiryStatus @default(PENDING)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String
  commission  Commission?

  // Notification tracking
  notified    Boolean  @default(false)
  
  @@index([status])
  @@index([userId])
  @@index([listingId])
}

// Social Models
model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content   String?  @db.Text
  images    String[] // Array of image URLs
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  listing   Listing? @relation(fields: [listingId], references: [id])
  listingId String?
  
  // Engagement
  likes     Like[]
  comments  Comment[]
  shares    Share[]
  
  @@index([authorId])
  @@index([listingId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content   String   @db.Text
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  
  @@index([authorId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Enums
enum UserRole {
  USER
  AGENT
  ADMIN
}

enum ListingCategory {
  PROPERTY
  SERVICE
  LEISURE
}

enum ListingType {
  SALE
  RENT
  SERVICE
  EXPERIENCE
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PENDING
  SOLD
  RENTED
  EXPIRED
  INACTIVE
  PRIVATE
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
  INDUSTRIAL
}

enum TenureType {
  FREEHOLD
  LEASEHOLD
  SHARE_OF_FREEHOLD
}

enum ServiceType {
  TRADE
  PROFESSIONAL
  SPECIALIST
}

enum LeisureType {
  RENTAL
  EXPERIENCE
  VENUE
}

enum BookingType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum EnquiryStatus {
  PENDING
  RESPONDED
  ACCEPTED
  REJECTED
  CLOSED
  SPAM
}