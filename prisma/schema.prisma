// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER          // Basic user
  LANDLORD      // Property owner/landlord
  AGENT         // Real estate agent
  ADMIN         // System administrator
}

enum SubscriptionTier {
  FREE
  PRO
}

enum ListingType {
  PROPERTY      // Always free
  SERVICE       // Paid weekly
  LEISURE       // Free with quota
}

enum ListingStatus {
  DRAFT           // Initial creation
  PENDING_REVIEW  // Submitted for review
  APPROVED        // Approved by admin/agent
  ACTIVE          // Live on the platform
  INACTIVE        // Temporarily hidden
  REJECTED        // Rejected by admin/agent
  EXPIRED         // Service listing payment expired
  COMPLETED       // For services/leisure that are done
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LUXURY
  TIMESHARE
  LAND
  INDUSTRIAL
}

enum ServiceCategory {
  TRADES
  PROFESSIONAL
  SPECIALIST
  OTHER
}

enum LeisureType {
  RENTAL        // Cars, boats, venues
  EXPERIENCE    // Tours, activities
  EVENT         // Gigs, shows
}

enum LeadStatus {
  NEW           // Just created
  QUALIFIED     // Verified and ready for action
  IN_PROGRESS   // Being worked on
  WON           // Successfully converted
  LOST          // Not converted
  ARCHIVED      // Stored for reference
}

enum LeadSource {
  PROPERTY_ENQUIRY    // From property listing contact form
  VALUATION_REQUEST   // Property owner seeking valuation
  WEBSITE_FORM        // General contact form
  AGENT_REFERRAL      // From another agent
  DIRECT             // Direct contact
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole        @default(USER)
  subscriptionTier   SubscriptionTier @default(FREE)
  subscriptionEnds   DateTime?       // For PRO subscriptions
  stripeCustomerId   String?         @unique
  stripeVerificationId String?
  isVerified         Boolean         @default(false)
  
  // Agent/Professional specific fields
  companyName        String?
  licenseNumber      String?         // For agents
  licenseVerified    Boolean         @default(false)
  rating            Float?          // Average rating
  totalReviews      Int             @default(0)
  
  // Usage limits and quotas (for Leisure listings)
  monthlyLeisureQuota Int           @default(3)  // Free users get 3 leisure listings
  monthlyLeisureUsed Int            @default(0)
  quotaResetDate    DateTime?
  
  // Feature access flags
  hasAnalyticsAccess Boolean        @default(false)
  hasCrmAccess      Boolean         @default(false)
  hasFeatureListings Boolean        @default(false)
  
  // Social features
  canPost           Boolean         @default(false)  // Requires identity verification
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  properties        Property[]      // Free property listings
  services         Service[]       // Paid service listings
  leisure          Leisure[]       // Free leisure listings (with quota)
  posts            Post[]          // Social media posts
  reviews          Review[]        // Reviews received
  accounts         Account[]
  sessions         Session[]
  leads            Lead[]          // Leads owned by this user
  assignedTasks    Task[]          // Tasks assigned to this user
  createdTasks     Task[]    @relation("TaskCreator")  // Tasks created by this user
}

model Property {
  id               String          @id @default(cuid())
  title            String
  description      String
  type             PropertyType
  price            Float
  size             Float?
  bedrooms         Int?
  bathrooms        Int?
  features         String[]
  location         String
  
  // Status and verification
  status           ListingStatus   @default(DRAFT)
  isVerified       Boolean        @default(false)
  isFeatured       Boolean        @default(false)  // PRO users only
  
  // Review details
  reviewedBy       String?        // Admin/Agent who reviewed
  reviewedAt       DateTime?
  reviewNotes      String?
  
  // Relations
  owner            User           @relation(fields: [ownerId], references: [id])
  ownerId          String
  leads            Lead[]         // Property enquiry leads
  
  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Service {
  id               String          @id @default(cuid())
  title            String
  description      String
  category         ServiceCategory
  price            Float
  duration         String?         // Service duration if applicable
  location         String?         // Service location if applicable
  
  // Payment and status
  weeklyFee        Float          @default(10)     // 10 EUR weekly fee
  paidUntil        DateTime?                       // When service listing expires
  status           ListingStatus   @default(DRAFT)
  
  // PRO features
  isFeatured       Boolean        @default(false)  // PRO users only
  
  // Relations
  provider         User           @relation(fields: [providerId], references: [id])
  providerId       String
  reviews          Review[]
  leads            Lead[]         // Service enquiry leads
  
  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Leisure {
  id               String          @id @default(cuid())
  title            String
  description      String
  type             LeisureType
  price            Float?
  location         String
  availability     DateTime[]
  
  // Status
  status           ListingStatus   @default(DRAFT)
  isFeatured       Boolean        @default(false)  // PRO users only
  
  // Relations
  owner            User           @relation(fields: [ownerId], references: [id])
  ownerId          String
  reviews          Review[]
  leads            Lead[]         // Leisure enquiry leads
  
  // Timestamps
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Lead {
  id               String         @id @default(cuid())
  title            String
  description      String
  status           LeadStatus     @default(NEW)
  source           LeadSource
  value            Float?         // Potential value of the lead
  
  // Contact information
  contactName      String
  contactEmail     String
  contactPhone     String?
  
  // Relations
  owner            User          @relation(fields: [ownerId], references: [id])
  ownerId          String
  property         Property?     @relation(fields: [propertyId], references: [id])
  propertyId       String?
  service          Service?      @relation(fields: [serviceId], references: [id])
  serviceId        String?
  leisure          Leisure?      @relation(fields: [leisureId], references: [id])
  leisureId        String?
  tasks            Task[]        // Related tasks
  
  // Tracking
  lastContactedAt  DateTime?
  nextFollowUpDate DateTime?
  notes            String?       @db.Text
  
  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Task {
  id               String         @id @default(cuid())
  title            String
  description      String?
  priority         TaskPriority   @default(MEDIUM)
  status           TaskStatus     @default(TODO)
  dueDate          DateTime?
  
  // Relations
  assignedTo       User          @relation(fields: [assignedToId], references: [id])
  assignedToId     String
  creator          User          @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId        String
  lead             Lead?         @relation(fields: [leadId], references: [id])
  leadId           String?
  
  // Task details
  completedAt      DateTime?
  notes            String?       @db.Text
  
  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Post {
  id               String         @id @default(cuid())
  content          String
  images           String[]
  likes            Int           @default(0)
  
  // Relations
  author           User          @relation(fields: [authorId], references: [id])
  authorId         String
  
  // Timestamps
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Review {
  id              String         @id @default(cuid())
  rating          Int
  comment         String
  isVerified      Boolean       @default(false)
  
  // Relations
  reviewer        User          @relation(fields: [reviewerId], references: [id])
  reviewerId      String
  service         Service?      @relation(fields: [serviceId], references: [id])
  serviceId       String?
  leisure         Leisure?      @relation(fields: [leisureId], references: [id])
  leisureId       String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}