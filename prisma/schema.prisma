// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  isVerified    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  properties    Property[]   // Properties owned by user
  commissions   Commission[] // Commissions received (for agents)
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  address     String
  price       Float
  type        PropertyType
  status      PropertyStatus @default(ACTIVE)
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id])
  commissions Commission[]
}

model Commission {
  id             String           @id @default(cuid())
  propertyId     String
  agentId        String
  saleAmount     Float
  totalCommission Float
  platformFee    Float
  agentCommission Float
  status         CommissionStatus @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  property       Property        @relation(fields: [propertyId], references: [id])
  agent          User           @relation(fields: [agentId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  WITHDRAWN
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum NotificationType {
  COMMISSION
  PROPERTY
  SYSTEM
}