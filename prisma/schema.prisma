// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CRM Models
model CRMWorkspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  members     CRMWorkspaceMember[]
  boards      CRMBoard[]
  groups      CRMGroup[]
  tags        CRMTag[]
  tasks       CRMTask[]
  leads       CRMLead[]
  contacts    CRMContact[]
  deals       CRMDeal[]
  activities  CRMActivity[]
}

model CRMWorkspaceMember {
  id          String       @id @default(cuid())
  workspaceId String
  userId      String
  role        CRMRole     @default(MEMBER)
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([workspaceId, userId])
}

model CRMBoard {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        CRMBoardType
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  groups      CRMGroup[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMGroup {
  id          String       @id @default(cuid())
  name        String
  description String?
  color       String?
  position    Int
  boardId     String
  board       CRMBoard     @relation(fields: [boardId], references: [id])
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  tasks       CRMTask[]
  leads       CRMLead[]
  deals       CRMDeal[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMTask {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      CRMStatus   @default(NEW)
  priority    CRMPriority @default(MEDIUM)
  dueDate     DateTime?
  groupId     String
  group       CRMGroup     @relation(fields: [groupId], references: [id])
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  assignedTo  String?
  assignee    User?       @relation(fields: [assignedTo], references: [id])
  tags        CRMTaskTag[]
  activities  CRMActivity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMLead {
  id          String       @id @default(cuid())
  name        String
  email       String?
  phone       String?
  source      String?
  status      CRMStatus   @default(NEW)
  value       Float?
  groupId     String
  group       CRMGroup     @relation(fields: [groupId], references: [id])
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  assignedTo  String?
  assignee    User?       @relation(fields: [assignedTo], references: [id])
  tags        CRMLeadTag[]
  activities  CRMActivity[]
  contacts    CRMContact[]
  deals       CRMDeal[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMContact {
  id          String       @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  position    String?
  leadId      String?
  lead        CRMLead?     @relation(fields: [leadId], references: [id])
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  activities  CRMActivity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMDeal {
  id          String       @id @default(cuid())
  title       String
  value       Float
  status      CRMStatus   @default(NEW)
  closingDate DateTime?
  leadId      String
  lead        CRMLead      @relation(fields: [leadId], references: [id])
  groupId     String
  group       CRMGroup     @relation(fields: [groupId], references: [id])
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  assignedTo  String?
  assignee    User?       @relation(fields: [assignedTo], references: [id])
  activities  CRMActivity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CRMTag {
  id          String       @id @default(cuid())
  name        String
  color       String
  workspaceId String
  workspace   CRMWorkspace @relation(fields: [workspaceId], references: [id])
  tasks       CRMTaskTag[]
  leads       CRMLeadTag[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, workspaceId])
}

model CRMTaskTag {
  taskId    String
  tagId     String
  task      CRMTask     @relation(fields: [taskId], references: [id])
  tag       CRMTag      @relation(fields: [tagId], references: [id])
  createdAt DateTime    @default(now())

  @@id([taskId, tagId])
}

model CRMLeadTag {
  leadId    String
  tagId     String
  lead      CRMLead     @relation(fields: [leadId], references: [id])
  tag       CRMTag      @relation(fields: [tagId], references: [id])
  createdAt DateTime    @default(now())

  @@id([leadId, tagId])
}

model CRMActivity {
  id          String          @id @default(cuid())
  type        CRMActivityType
  description String
  taskId      String?
  task        CRMTask?        @relation(fields: [taskId], references: [id])
  leadId      String?
  lead        CRMLead?        @relation(fields: [leadId], references: [id])
  contactId   String?
  contact     CRMContact?     @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        CRMDeal?        @relation(fields: [dealId], references: [id])
  workspaceId String
  workspace   CRMWorkspace    @relation(fields: [workspaceId], references: [id])
  createdBy   String
  creator     User           @relation(fields: [createdBy], references: [id])
  createdAt   DateTime       @default(now())
}

// User Model (extended)
model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  ownedWorkspaces   CRMWorkspace[]
  workspaceMember   CRMWorkspaceMember[]
  assignedTasks     CRMTask[]
  assignedLeads     CRMLead[]
  assignedDeals     CRMDeal[]
  activities        CRMActivity[]
}

// Auth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum CRMRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CRMBoardType {
  TASKS
  LEADS
  DEALS
}

enum CRMStatus {
  NEW
  IN_PROGRESS
  FOLLOW_UP
  CLOSED
  WON
  LOST
}

enum CRMPriority {
  LOW
  MEDIUM
  HIGH
}

enum CRMActivityType {
  NOTE
  EMAIL
  CALL
  MEETING
  TASK_UPDATE
  LEAD_UPDATE
  DEAL_UPDATE
  STATUS_CHANGE
  ASSIGNMENT
  TAG_ADDED
  TAG_REMOVED
}