// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  agentProfile  AgentProfile?
  properties    PropertyListing[]
  views         PropertyView[]
  favorites     PropertyFavorite[]
  enquiries     PropertyEnquiry[]
  offers        PropertyOffer[]
  notifications Notification[]
  chats         ChatParticipant[]
  messages      ChatMessage[]
  receipts      MessageReceipt[]
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

// Property Models
model PropertyListing {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  price       Float
  currency    String        @default("GBP")
  location    String
  propertyType PropertyType
  listingType ListingType
  status      ListingStatus @default(ACTIVE)
  bedrooms    Int?
  bathrooms   Int?
  features    String[]
  amenities   String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId      String
  user        User             @relation(fields: [userId], references: [id])
  images      PropertyImage[]
  views       PropertyView[]
  favorites   PropertyFavorite[]
  enquiries   PropertyEnquiry[]
  offers      PropertyOffer[]
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
}

enum ListingType {
  SALE
  RENT
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  WITHDRAWN
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())

  propertyId String
  property   PropertyListing @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyView {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   PropertyListing @relation(fields: [propertyId], references: [id])
}

model PropertyFavorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   PropertyListing @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model PropertyEnquiry {
  id         String   @id @default(cuid())
  message    String   @db.Text
  status     EnquiryStatus @default(NEW)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   PropertyListing @relation(fields: [propertyId], references: [id])
}

enum EnquiryStatus {
  NEW
  RESPONDED
  CLOSED
}

model PropertyOffer {
  id         String   @id @default(cuid())
  amount     Float
  currency   String   @default("GBP")
  message    String?  @db.Text
  status     OfferStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   PropertyListing @relation(fields: [propertyId], references: [id])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model AgentProfile {
  id          String   @id @default(cuid())
  phone       String?
  company     String?
  license     String?
  verified    Boolean  @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

// Real-time Notification Models
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  readAt    DateTime?
  actionUrl String?
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// Chat Models
model Chat {
  id          String   @id @default(cuid())
  name        String?
  type        ChatType @default(DIRECT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ChatParticipant[]
  messages     ChatMessage[]
}

enum ChatType {
  DIRECT
  GROUP
}

model ChatParticipant {
  id        String   @id @default(cuid())
  role      ChatRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

enum ChatRole {
  OWNER
  ADMIN
  MEMBER
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  receipts  MessageReceipt[]
}

model MessageReceipt {
  id        String         @id @default(cuid())
  status    MessageStatus  @default(SENT)
  readAt    DateTime?
  createdAt DateTime       @default(now())

  userId    String
  user      User          @relation(fields: [userId], references: [id])
  messageId String
  message   ChatMessage   @relation(fields: [messageId], references: [id])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}