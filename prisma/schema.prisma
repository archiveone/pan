// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified        DateTime?
  image                 String?
  password             String?
  bio                   String?                @db.Text
  location             String?
  phone                String?
  website              String?
  rating               Float                   @default(0)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // New Profile Features
  profileBackground    String?                // Background image URL
  coverPhoto          String?                // Cover photo URL
  headline            String?                // Professional headline
  socialLinks         SocialLink[]           // Social media links
  portfolioItems      PortfolioItem[]        // Portfolio items (documents, images, etc.)
  todos               Todo[]                 // Private to-do items
  educationHistory    Education[]            // Education history
  workHistory        WorkHistory[]          // Work history
  certifications      Certification[]        // Professional certifications
  skills              Skill[]                // Professional skills
  languages           Language[]             // Languages spoken
  availability        Availability?          // Availability settings
  customSections      ProfileSection[]       // Custom profile sections

  // Existing Relations
  expertise           String[]
  serviceAreas        String[]
  qualifications      Qualification[]
  verifications       Verification[]
  listings            Listing[]
  reviews             Review[]
  posts               Post[]
  followers           Follow[]               @relation("Following")
  following           Follow[]               @relation("Followers")
  conversations       ConversationParticipant[]
  messages            Message[]
  notifications       Notification[]
  achievements        Achievement[]
  paymentMethods      PaymentMethod[]
  bankAccounts        BankAccount[]
  subscriptions       Subscription[]
  activities          Activity[]
  profileViews        ProfileView[]
}

// New Models for Enhanced Profile Features

model SocialLink {
  id        String   @id @default(cuid())
  platform  String   // e.g., LinkedIn, Twitter, Instagram
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model PortfolioItem {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        String   // e.g., Document, Image, Video, Link
  url         String   // File or external URL
  thumbnail   String?  // Thumbnail image URL
  category    String?  // Custom category
  featured    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  dueDate     DateTime?
  completed   Boolean  @default(false)
  priority    String?  // High, Medium, Low
  category    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Education {
  id              String   @id @default(cuid())
  institution     String
  degree          String
  fieldOfStudy    String
  startDate       DateTime
  endDate         DateTime?
  grade           String?
  activities      String?  @db.Text
  description     String?  @db.Text
  verified        Boolean  @default(false)
  verificationDoc String?  // URL to verification document
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model WorkHistory {
  id              String   @id @default(cuid())
  company         String
  position        String
  location        String?
  startDate       DateTime
  endDate         DateTime?
  current         Boolean  @default(false)
  description     String?  @db.Text
  achievements    String[] // List of achievements
  skills          String[] // Skills used
  verified        Boolean  @default(false)
  verificationDoc String?  // URL to verification document
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Certification {
  id              String   @id @default(cuid())
  name            String
  issuingBody     String
  issueDate       DateTime
  expiryDate      DateTime?
  credentialId    String?
  credentialUrl   String?
  verified        Boolean  @default(false)
  verificationDoc String?  // URL to verification document
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  category    String?
  level       String?  // Beginner, Intermediate, Expert
  endorsed    Boolean  @default(false)
  endorsements Int     @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Language {
  id          String   @id @default(cuid())
  name        String
  level       String   // Basic, Intermediate, Fluent, Native
  certified   Boolean  @default(false)
  certificate String?  // URL to language certificate
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Availability {
  id            String   @id @default(cuid())
  status        String   // Available, Busy, Away
  schedule      Json?    // Weekly schedule
  timezone      String
  responseTime  Int?     // Average response time in minutes
  bookingNotice Int?     // Minimum notice for bookings in hours
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProfileSection {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  type        String   // Text, Gallery, List, etc.
  order       Int
  visible     Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

// Existing Models (Add any missing ones)

model Qualification {
  id           String   @id @default(cuid())
  title        String
  institution  String
  year         Int
  verified     Boolean  @default(false)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Verification {
  id          String   @id @default(cuid())
  type        String   // ID, Address, Professional, etc.
  status      String   // PENDING, VERIFIED, REJECTED
  verifiedAt  DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

// Add other existing models (Listing, Review, Post, Follow, etc.)
// as they were in the original schema

// Remember to add proper indexes and relations