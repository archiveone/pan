// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("user")
  accountType    String    @default("individual")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Profile Relations
  profile        Profile?
  
  // Property Relations
  properties     Property[]    @relation("PropertyOwner")
  propertyViews  PropertyView[]
  propertyLeads  PropertyLead[]
  
  // Service Relations
  services       Service[]     @relation("ServiceProvider")
  serviceLeads   ServiceLead[]
  
  // Leisure Relations
  leisureItems   LeisureItem[] @relation("LeisureOwner")
  leisureBookings LeisureBooking[]
  
  // CRM Relations
  contacts       Contact[]     @relation("ContactOwner")
  leads          Lead[]        @relation("LeadOwner")
  tasks          Task[]        @relation("TaskOwner")
  
  // Social Relations
  posts          Post[]
  comments       Comment[]
  follows        Follow[]      @relation("Follower")
  followers      Follow[]      @relation("Following")
  
  // Verification
  verification   Verification?
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  location    String?
  website     String?
  company     String?
  profession  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Property Models
model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // residential, commercial, luxury
  status      String   // for-sale, for-rent, sold, rented
  price       Float
  currency    String   @default("GBP")
  location    String
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  features    String[]
  images      String[]
  ownerId     String
  owner       User     @relation("PropertyOwner", fields: [ownerId], references: [id])
  views       PropertyView[]
  leads       PropertyLead[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PropertyView {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model PropertyLead {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      String   // new, contacted, qualified, lost
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Service Models
model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // trades, professional, specialist
  price       Float?
  currency    String   @default("GBP")
  location    String
  providerId  String
  provider    User     @relation("ServiceProvider", fields: [providerId], references: [id])
  leads       ServiceLead[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceLead {
  id          String   @id @default(cuid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      String   // new, contacted, qualified, lost
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Leisure Models
model LeisureItem {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // rental, experience
  category    String   // car, boat, venue, tour, dining
  price       Float
  currency    String   @default("GBP")
  location    String
  availability Json?
  images      String[]
  ownerId     String
  owner       User     @relation("LeisureOwner", fields: [ownerId], references: [id])
  bookings    LeisureBooking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LeisureBooking {
  id          String   @id @default(cuid())
  itemId      String
  item        LeisureItem @relation(fields: [itemId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime
  status      String   // pending, confirmed, cancelled
  totalPrice  Float
  currency    String   @default("GBP")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// CRM Models
model Contact {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation("ContactOwner", fields: [ownerId], references: [id])
  name        String
  email       String?
  phone       String?
  company     String?
  type        String   // client, prospect, partner
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation("LeadOwner", fields: [ownerId], references: [id])
  title       String
  value       Float?
  currency    String   @default("GBP")
  status      String   // new, contacted, qualified, won, lost
  source      String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation("TaskOwner", fields: [ownerId], references: [id])
  title       String
  description String?
  dueDate     DateTime?
  status      String   // pending, in-progress, completed
  priority    String   // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Social Models
model Post {
  id          String    @id @default(cuid())
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  content     String
  images      String[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String   @id @default(cuid())
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

// Verification Model
model Verification {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // identity, business, professional
  status      String   // pending, verified, rejected
  documents   Json?
  verifiedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}